@page "/deleteCategory/{categoryId}"
@inject NavigationManager NavigationManager
@inject UseCases.CategoryUseCase.Interfaces.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject UseCases.CategoryUseCase.Interfaces.IAddCategoryUseCase AddCategoryUsecase
@inject UseCases.CategoryUseCase.Interfaces.IEditCategoryUseCase EditCategoryUsecase

<h3>Delete Category</h3>
<br/>
@if (true)
{
    <EditForm Model="category" OnValidSubmit="onValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control">
            </InputText>
        </div>

        <div class="form-group">
            <label for="name">Description</label>
            <InputText id="description" @bind-Value="category.Description" class="form-control">
            </InputText>
        </div>

        <button type="submit" class="btn btn-primary"> Delete Category</button>
          <button type="submit" class="btn btn-primary" @onclick="onClickCancel">Go Back</button>

    </EditForm>
}

@code {

    [Parameter]
    public string CategoryId { get; set; }

    private Category category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        category = new Category();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(CategoryId, out int categoryId))
        {
            this.category = GetCategoryByIdUseCase.Execute(categoryId);
        }

    }

    private void onValidSubmit()
    {
        EditCategoryUsecase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");

    }

     private void onClickCancel()
    {
        NavigationManager.NavigateTo("/categories");

    }
}
